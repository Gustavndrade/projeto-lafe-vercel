---
description: Valida√ß√µes obrigat√≥rias e seguran√ßa (hash, timestamps, input)
alwaysApply: true
globs: src/**/*.{ts,tsx}
---

## üõ°Ô∏è VALIDA√á√ïES OBRIGAT√ìRIAS

### 1) Valida√ß√£o de Email

```ts
export function validarFormatoEmail(email: string): string[] {
  const errors: string[] = [];
  if (!email) {
    errors.push("E-mail √© obrigat√≥rio");
    return errors;
  }
  // regex robusta para formato de e-mail
  return errors;
}
```

### 2) Valida√ß√£o de ID

```ts
export function validarUsuarioId(params: any): string[] {
  const errors: string[] = [];
  if (!params.id) errors.push("ID √© obrigat√≥rio");
  else if (isNaN(Number(params.id))) errors.push("ID deve ser um n√∫mero");
  else if (Number(params.id) <= 0)
    errors.push("ID deve ser um n√∫mero positivo");
  return errors;
}
```

### 3) Valida√ß√£o de Pagina√ß√£o

```ts
export function validarPaginacaoQuery(query: any): string[] {
  const errors: string[] = [];
  if (query.page !== undefined) {
    const pageNum = Number(query.page);
    if (isNaN(pageNum) || !Number.isInteger(pageNum) || pageNum < 1) {
      errors.push("Page deve ser um n√∫mero inteiro positivo");
    }
  }
  return errors;
}
```

## üîê SEGURAN√áA

### Hash de Senhas (SEMPRE)

```ts
import { hashPassword } from '../../shared/utils/Hash';
async createUser(user: UserRequestDTO): Promise<UserResponseDTO> {
  user.password = await hashPassword(user.password);
  // ...
}
```

### Timestamps Autom√°ticos (Prisma)

```prisma
model User {
  id        Int      @id @default(autoincrement())
  // outros campos...
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

### Valida√ß√£o de Dados (exemplo CreateUser)

```ts
export function validarCriacaoUsuario(dados: any): string[] {
  const errors: string[] = [];
  if (!data.name || data.name.length < 2) {
    errors.push("Nome deve ter pelo menos 2 caracteres");
  }
  return errors;
}
```
