---
description: Itens proibidos, checklist por m√≥dulo/endpoint e objetivos de qualidade
alwaysApply: true
---

## üö´ O QUE NUNCA FAZER

- Usar bibliotecas de valida√ß√£o externas (Joi, Yup, etc.)
- Duplicar valida√ß√µes entre camadas
- Usar console.log para erros
- Pular camadas da arquitetura
- Expor senhas em DTOs de resposta
- Usar IDs fixos em testes
- Criar m√≥dulos sem documenta√ß√£o
- Usar any sem necessidade
- N√£o tratar erros adequadamente
- Criar rotas sem valida√ß√£o

### ‚ùå Estrutura proibida (exemplo)

```ts
async criarUsuario(req: Request, res: Response): Promise<any> {
  if (!req.body.name) return res.status(400).json({ error: "Nome obrigat√≥rio" });
  const user = await this.userRepository.criarUsuario(req.body);
  return res.status(201).json(user);
}
```

## ‚úÖ CHECKLIST OBRIGAT√ìRIO

### Por m√≥dulo

- [ ] Estrutura de pastas correta
- [ ] Controller, Service, Repository, Model implementados
- [ ] DTOs separados (Request, Response, Update)
- [ ] Valida√ß√µes nas rotas com middleware
- [ ] Tratamento de erros com AppError
- [ ] Hash de senhas implementado
- [ ] Timestamps no schema Prisma
- [ ] Pagina√ß√£o implementada
- [ ] README.md completo
- [ ] Collection Postman criada
- [ ] Pasta de testes com exemplos

### Por endpoint

- [ ] Valida√ß√£o de entrada
- [ ] Tratamento de erros
- [ ] Resposta padronizada
- [ ] C√≥digos de status corretos
- [ ] Documenta√ß√£o atualizada

## üéØ OBJETIVOS DE QUALIDADE

### C√≥digo

- Consistente, leg√≠vel, test√°vel, seguro e escal√°vel (camadas)

### Documenta√ß√£o

- Completa, atualizada, test√°vel (Postman) e acess√≠vel

## üöÄ APLICA√á√ÉO DAS REGRAS

### SEMPRE seguir:

1. Arquitetura em camadas
2. Valida√ß√£o manual
3. Tratamento de erros
4. Documenta√ß√£o completa
5. Testes organizados

### NUNCA quebrar:

1. N√£o usar libs de valida√ß√£o externas
2. N√£o duplicar valida√ß√µes
3. N√£o pular camadas
4. N√£o criar m√≥dulos sem documenta√ß√£o
5. N√£o usar console.log para erros
