---
description: PadrÃµes de cÃ³digo para Controller, Service e Repository
alwaysApply: true
globs: src/**/*.{ts,tsx}
---

## ðŸ”§ PADRÃ•ES DE CÃ“DIGO

### Controller (HTTP Layer) â€” CORRETO

```ts
async createUser(req: Request, res: Response, next: NextFunction): Promise<any> {
  try {
    const user = await this.userService.createUser(req.body);
    return res.status(201).json(user);
  } catch (error) {
    next(error);
  }
}
```

### Controller â€” ERRADO

```ts
async createUser(req: Request, res: Response): Promise<any> {
  const user = await this.userService.createUser(req.body);
  return res.status(201).json(user);
}
```

### Service (Regra de NegÃ³cio) â€” CORRETO

```ts
async createUser(user: UserRequestDTO): Promise<UserResponseDTO> {
  user.password = await hashPassword(user.password);
  const userResponse = await this.userRepository.createUser(user);
  return userResponse.toResponse();
}
```

### Service â€” ERRADO (validaÃ§Ã£o aqui Ã© proibida)

```ts
async createUser(user: UserRequestDTO): Promise<UserResponseDTO> {
  if (!user.name) throw new Error("Nome obrigatÃ³rio");
  return await this.userRepository.createUser(user);
}
```

### Repository (Acesso a Dados) â€” CORRETO

```ts
async createUser(user: UserRequestDTO): Promise<UserModel> {
  const emailFound = await prisma.user.findUnique({ where: { email: user.email } });
  if (emailFound) throw new AppError("E-mail jÃ¡ cadastrado", 400);

  const createdUser = await prisma.user.create({ data: user.dataToPrisma() });
  return UserModel.prismaToModel(createdUser);
}
```

### Repository â€” ERRADO

```ts
async createUser(user: UserRequestDTO): Promise<UserModel> {
  return await prisma.user.create({ data: user });
}
```
