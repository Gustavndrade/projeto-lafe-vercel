---
description: Padr√£o de pagina√ß√£o (interfaces + repository)
alwaysApply: true
globs: src/**/*.{ts,tsx}
---

## üìä PAGINA√á√ÉO OBRIGAT√ìRIA

### Interface

```ts
// Interface de resposta de pagina√ß√£o gen√©rica
interface RespostaPaginada<T> {
  dados: T[];
  paginacao: {
    pagina: number;
    limite: number;
    total: number;
    totalPaginas: number;
    temProxima: boolean;
    temAnterior: boolean;
  };
}

// Exemplo de implementa√ß√£o no reposit√≥rio
async function listarUsuariosPaginado(
  query: ConsultaPaginacao
): Promise<RespostaPaginada<UsuarioModel>> {
  const pagina = query.pagina || 1;
  const limite = query.limite || 10;
  const pular = (pagina - 1) * limite;

  const [usuarios, total] = await Promise.all([
    prisma.usuario.findMany({
      where,
      skip: pular,
      take: limite,
      orderBy: { createdAt: "desc" },
    }),
    prisma.usuario.count({ where }),
  ]);

  const totalPaginas = Math.ceil(total / limite);
  return {
    dados: usuarios.map((usuario) => UsuarioModel.prismaParaModel(usuario)),
    paginacao: {
      pagina,
      limite,
      total,
      totalPaginas,
      temProxima: pagina < totalPaginas,
      temAnterior: pagina > 1,
    },
  };
}
```
